---
title: Session 10 - Step 3 in TCM
number-sections: false
description: "Develop and implement a formal model"
---

## Reminder: TCM steps

1. Identify definitions of constructs and relevant phenomena
2. Formulate a prototheory: Create a VAST display
3. **TODAY: Develop a formal model**
4. Check the adequacy of the formal model
   - Do sensitivity analyses etc.
5. Evaluate the overall worth of the constructed theory


## Step 1: Define variables

![](img/How_deep_is_your_love.png){width=200px}

::: {.callout-warning title="**Answer: -136.7**"}
:::

Define a variable for each construct of the VAST display. These can be measured variables or internal, unmeasured variables. You can either refer to an actual measurement procedure or simply define a variable. In both cases you should explicitly define the following properties:

- *scale level* (categorical, ordinal, interval scale), 
- *range* of possible values (e.g., 0 .. 1), and 
- *semantic anchors* (e.g., 0 = "complete absence", 1 = "maximal possible value")

### Some guiding questions and heuristics

- Scale level of measurement ([Stevens's typology](https://en.wikipedia.org/wiki/Level_of_measurement)): <br>Nominal &rarr; Ordinal &rarr; Interval &rarr; Ratio
- Is the variable naturally bounded? On both sides or only one?
- How can the numbers be interpreted?
  - Natural/objective scale (e.g. physical distance)
  - As standardized *z*-scores?
  - Normalized to a value between 0 and 1? Or rather -1 to 1?
  - Can we find an empirical or semantic calibration?
    - Just noticable difference
    - 100 = "largest realistically imaginable quantity of that variable"

### Example

| Construct in VAST display     | Scale level | Range/values | Anchors                                                           |
| ----------------------------- | :---------: | ------------ | ----------------------------------------------------------------- |
| Affective tone of instruction |  Interval   | -1 .. 1      | -1 = maximally negative<br>0 = neutral<br>+1 = maximally positive |
|                               |             |              |                                                                   |
|                               |             |              |                                                                   |

### Deliverable:

Create a table with all constructs and accompanying variable definitions in your VAST display.


## Step 2: Define functional relationships between variables

Every causal path needs to be implemented as a function, where the dependent variable/output $y$ is a function of the input variables $x_i$.

$y = f(x_1, x_2, ..., x_i)$

This can, for example, be a linear function, $y = \beta_0 + \beta_1x_1$. As this is unbounded, however, it can easily happen that the computed $y$ exceeds the possible range of values.

If $y$ has defined boundaries (e.g., $[0; 1]$), a logistic function might be a convenient function, as it automatically bounds the values between a lower and an upper limit (in the basic logistic function, between 0 and 1):
$y = \frac{1}{1 + e^{-x}}$.

```{r}
#| echo: false
#| fig.width: 5
#| fig.height: 3 

# Define the logistic function
logistic <- function(x) {
  1 / (1 + exp(-x))
}

# Generate a sequence of x values
x_values <- seq(-10, 10, by = 0.1)

# Calculate y values using the logistic function
y_values <- logistic(x_values)

# Create the plot
plot(x_values, y_values, type = "l", col = "blue", xlab = "x", ylab = "y")
```

With the 4PL model from IRT, you can adjust the functional form to your needs, by:

- shifting the inflection point from left to right (aka. "item difficulty", parameter $d$)
- change the steepness of the S-shape (aka. "discrimination parameter", parameter $a$)
- Move the lower asymptote up or down (parameter $min$)
- Move the upper limit up or down (parameter $max$)

```{r}
logistic <- function (x, d = 0, a = 1, min = 0, max = 1) {
 min + (max - min)/(1 + exp(a * (d - x)))
}
```

```{r}
#| echo: false
#| fig.width: 5
#| fig.height: 5

par(mfcol=c(2, 2))
plot(x_values, logistic(x_values, d=5), type = "l", col = "blue", xlab = "x", ylab = "y", main="d=5")
plot(x_values, logistic(x_values, a=0.3), type = "l", col = "blue", xlab = "x", ylab = "y", main="a=0.3")
plot(x_values, logistic(x_values, min=0.2), type = "l", col = "blue", xlab = "x", ylab = "y", ylim=c(0, 1), main="min=0.2")
plot(x_values, logistic(x_values, max=0.7), type = "l", col = "blue", xlab = "x", ylab = "y", ylim=c(0, 1), main="max=0.7")
```

These parameters can be used to "squeeze" the S-shaped curve into the range of your variables. For example, if your $x$ variable is defined on the range $[0; 1]$, the following function parameters lead to a reasonable shift:

```{r}
#| echo: false
#| fig.width: 5
#| fig.height: 3

par(mfcol=c(1, 2))
x_values <- seq(0, 1, length.out=100)
plot(x_values, logistic(x_values, d=0, a=1), type = "l", col = "blue", xlab = "x", ylab = "y", main="Default (d=0, a=1)", xlim=c(0, 1), ylim=c(0, 1))
plot(x_values, logistic(x_values, d=0.5, a=10), type = "l", col = "blue", xlab = "x", ylab = "y", main="d=0.5, a=10", xlim=c(0, 1), ylim=c(0, 1))
```

Of course, this is just a start - you can use the full toolbox of mathematical functions to implement your model!

::: {.callout-note}
These considerations about functional forms, however, are typically not substantiated by psychological theory or background knowledge - at least at the start of a modeling project. We choose them, because we are (a) acquainted to it, and/or (b) they are mathematically convenient and tractable.

Empirical evidence can inform both your choice of the functional form, and, in a model-fitting step, the values of the parameters.
:::

### Deliverable:

Create a table with all functional relationships. Use the IDs from the VAST display to create an unambiguous connection between both documents.

## Step 3: Implement the functions in R

- Do "atomic" functions: Each R function implements exactly one functional relationship
- Connect all functions to one "super-function", which takes all free inputs as parameter and compute the focal output variable(s)
- Test the function:
  - Enter some reasoanble combinations of parameters
  - Draw plots where you vary one parameter on the x-axis and see the behavior of the output variable on the y-axis.


## Step 4: Simulate a full data set

Real participants bring variability in practical every variable. Assume a specific distribution of all input variables that participants bring to the experiment. Even better: find empirical evidence for it, for example from existing open data sets or summary statistics from publications.
This works best if the scaling of your variable (as defined in Step 1) already has an empirical grounding or can be related to such one (e.g., via *z*-standardization).

