{
  "hash": "991a75efa02cedb8a16edcca9ec6fa68",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Session 11 - Step 4 in TCM\nnumber-sections: false\ndescription: \"Check the behavior of the model in boundary conditions; do a sensitivity analysis\"\n---\n\n\n## Reminder: TCM steps\n\n1. Identify definitions of constructs and relevant phenomena\n2. Formulate a prototheory: Create a VAST display\n3. Develop a formal model\n4. **TODAY: Check the adequacy of the formal model**\n5. Evaluate the overall worth of the constructed theory (not covered in this course)\n\n\n## Step 1: Check adequacy of the combined model: Boundary conditions\n\nIn the last step, we created functional relationships between specific variables (i.e., the paths in the VAST display). Now let's check the behavior and adequacy of the combined model.\n\nCreate a full factorial combination of all relevant input parameters of your combined model. This can entail both the input variables of your virtual participants and \"tuning parameters\" of your functions. As a start, I recommend that you fix the tuning parameters to sensible values and only vary the input variables. Later, you can also check the influence of the tuning parameters.\n\nThe `expand.grid` function comes handy for creating all possible combinations of a provided set of vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparams <- expand.grid(\n  expected_anxiety = c(0, 0.5, 1),\n  alpha = c(0, 0.5, 1),\n  condition = c(\"Control\", \"Treatment\")\n)\n\nprint(params)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   expected_anxiety alpha condition\n1               0.0   0.0   Control\n2               0.5   0.0   Control\n3               1.0   0.0   Control\n4               0.0   0.5   Control\n5               0.5   0.5   Control\n6               1.0   0.5   Control\n7               0.0   1.0   Control\n8               0.5   1.0   Control\n9               1.0   1.0   Control\n10              0.0   0.0 Treatment\n11              0.5   0.0 Treatment\n12              1.0   0.0 Treatment\n13              0.0   0.5 Treatment\n14              0.5   0.5 Treatment\n15              1.0   0.5 Treatment\n16              0.0   1.0 Treatment\n17              0.5   1.0 Treatment\n18              1.0   1.0 Treatment\n```\n\n\n:::\n:::\n\n\nThis data frame can be seen as a sample of carefully chosen participants that cover the \"corners\" of your parameter space. When you submit that to your model function, you can measure the model's output at these boundary cases. In practice, you would choose more fine-grained steps in each variable (e.g., `alpha = seq(0, 1, by=0.1)`) to get a smooth plot of the model's behavior.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}