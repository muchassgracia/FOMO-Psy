{
  "hash": "19fbf1e036d0f00ccd7f9ea93e26a4f7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing cybernetic systems\"\nsubtitle: \"Bischof notation & BDI architecture\"\nauthor:\n  - name: Felix Schönbrodt\n    orcid: 0000-0002-8282-3910\n    email: felix.schoenbrodt@psy.lmu.de\n    affiliations: Ludwig-Maximilians-Universität München\ndate: 2023-11-10\nfooter: \"Formal modeling in psychology - Empirisches Praktikum, Ludwig-Maximilians-Universität München\"\nformat: \n  FOMO-revealjs: \n    output-ext: slide.html\n    transition: slide\n    background-transition: fade\n    touch: true\n    embed-resources: true\n  html: default\nrevealjs-plugins:\n  - attribution \n---\n\n\n## Two types of block diagrams\n### ...for cybernetic* models\n\n:::: {.columns}\n::: {.column width='60%' .r-fit-text}\nMason diagrams (used in DAGs, SEM, VAST) vs. Bischof diagrams:\n\n| Type                                           | Mason/VAST (left panel) | Bischof (right panel) |\n| ---------------------------------------------- | ----------------------- | --------------------- |\n| Signals/variables displayed as ...             | Circles/Boxes           | Arrows                |\n| Transfer elements/ computations/ relationships displayed as .. | Arrows                  | Boxes                 |\n\nBoth are interchangeable; we will use both styles.\n:::\n\n::: {.column width='40%'}\n![](img/Mason-Diagramme.jpg)\n:::\n::::\n\n::: footer\n* κυβερνήτης (kybernetes) = helmsperson (Steuermann)\n:::\n\n## Block diagrams for cybernetic models\n### Properties\n\n- Arrows are causal directions, not temporal links!\n  - This is *not* a flow diagram or process model\n  - Everything \"happens at the same time\"\n- Boxes are functions / computational transformations\n  - All arrows going *into* a box are inputs (independent variables)\n  - The arrow going *out of* a box (typically only one) is the function value (dependent variable)\n\n\n```{mermaid}\n%%| fig-width: 5\n%%{ init: { 'flowchart': { 'curve': 'natural' } } }%%\ngraph LR\n    START[ ] -- x1 --> f[y = 0.5*x1 + 2*x]\n    START2[ ] -- x2 --> f\n    f -- y --> STOP[ ]\n\n    style START fill-opacity:0, stroke-opacity:0;\n    style START2 fill-opacity:0, stroke-opacity:0;\n    style STOP  fill-opacity:0, stroke-opacity:0;\n```\n\n\n\n## Block diagrams for cybernetic models\n### Properties\n\n- Blocks can be placeholders for encapsulated subsystems (sometimes \"black boxes\")\n  - e.g. the eye as a black box: We might not care how exactly the neuronal pattern in the retina is transformed into the signal \"distance from object\"\n  - One general \"super-block\" in ABMs: The organism (delineated from the environment)\n- Arrow may originate in \"nowhere\" - then these are *free inputs*. These can be variables or constants (although constants also can be defined within the formula in a box).\n\n\n## Common errors\n\n:::: {.columns}\n::: {.column width='40%'}\n![](img/Common-errors.jpg)\n:::\n::: {.column width='60%' .incremental}\n- (a, b): Blocks without input or output are useless and can be reduced\n- (c): We need another block which has $x$ and $y$ as input and a new variable as output\n- (d): This reduces to $x = f(x)$ &rarr; $x$ = const.\n- (e): A block with only inputs but no outputs is useless\n- (f): This implies that $x$ and $y$ are constant.\n:::\n::::\n\n\n## Parameters of the model\n\nArrows are variables.\nParameters are concrete numbers for the computations in the boxes.\n\n\n## Sensors\n### Perceiving the environment\n\nOrganisms have a vast range of sensors for perceiving their environment. These have been adapted to selection pressures:\n\n- Humans don't have sensors for ultraviolet light (bees do)\n- We have no sensors for radioactivity, as this was no relevant selective force\n- Single-celled organism have, for example ...\n    - chemoreceptors for sugar\n    - tactile sense (simple membranes transmitting changes in pressure)\n\n\n## Sensors\n### Brunswik's lens model\n\n::: {.r-fit-text .incremental}\n- Organisms constantly need to form a [judgement]{.bg style='--col: #fff100'} about latent properties of situations and objects (the [criterion]{.bg style='--col: #fff100'})\n- Most criteria are not directly observable, but need to be inferred via [cues]{.bg style='--col: #fff100'}. Example: \n  - Latent property: The caloric energy of a dessert\n  - Cues: Size, taste, color\n- Cues often are not perfect indicators, but rather statistically correlated with the criterion. \n<br>Higher correlation &rarr; higher [cue validity]{.bg style='--col: #fff100'}\n- Not all cues are used (with the same weight) in judgement formation &rarr; [cue utilization]{.bg style='--col: #fff100'}\n:::\n\n::: footer\nBrunswik, E. (1952). The conceptual framework of psychology. (Int. Encycl. unified Sci., v. 1, no. 10.). Oxford, England: Univ. Chicago Press.\n:::\n\n## Sensors\n### Brunswik's lens model\n\n![](img/lens_model.png){.r-stretch}\n\n::: footer\nFig. 1 from Hirschmüller et al. (2013). [https://doi.org/10.1037/a0030383](https://doi.org/10.1037/a0030383)\n:::\n\n\n## Sensors\n### Implementing the lens model as a demiurg\n\n:::: {.columns}\n::: {.column width='40%' .r-fit-text}\nPrinciple:\n\n- Any external information must enter the organism via a *sensor*\n- Arrows going into a sensor must be observable cues\n- Arrows going out of sensors are the organism's representation of the phenomenon in the environment\n- The lens model itself (i.e., the weights of cue validity and utilization) is implemented in the sensor box\n- No arrow may directly cross a block border\n:::\n\n::: {.column width='60%'}\n![](img/BSB_sensor.png){width=600}\n:::\n::::\n\n\n\n## Actors\n\n![](img/BSB_actor.png)\n\nSensing the environment only makes sense when organisms are able to react on this information. Devices that allow to manipulate the environment (or the organism's position within the environment) are called [actors]{.bg style='--col: #fff100'}.\n\n## Example: The Zurich Model of Social Motivation\n\n![](img/ZM_Schema.png)\n\n\n\n# BDI model:<br>Belief → Desire → Intention {background-color=\"#40666e\"}\n\n## BDI model: Belief → Desire → Intention\nA common model from software architecture is the [BDI model]{.hl}:\n\n- **Beliefs** about the world (including itself and other agents)\n- **Desires** represent the motivational state of the agent - what the agent would *like* to accomplish.\n- **Intentions** represent the deliberative state of the agent – what the agent has *chosen* to do.\n\n::: footer\nText abridged from Wikipedia: [Belief–desire–intention software model](https://en.wikipedia.org/wiki/Belief–desire–intention_software_model)\n:::\n\n## BDI model: Belief → Desire → Intention\n### Two examples\n\n**{{< fa people-group size=1x >}} Group exercise (15 min.):**\nConvert these plots into a proper Bischof-style diagram. Add variables/boxes where necessary.\n\n:::: {.columns}\n::: {.column width='50%'}\n![](img/BDI_example1.png)\n:::\n\n::: {.column width='50%'}\n![](img/BDI_example2.jpeg)\n:::\n::::\n\n::: footer\nLeft: [Norling (2009, p. 13)](https://rest.neptune-prod.its.unimelb.edu.au/server/api/core/bitstreams/14e50a72-5f2c-531e-bbf3-a536a7f2ec9f/content) | Right: [BDI4JADE](https://github.com/ingridnunes/bdi4jade)\n:::\n\n\n\n## One possible BDI implementation in Bischof-style\n\n![](img/BSB_BDI.png)\n\n\n<!-- Footer insert below -->\n\n\n# End\n\n## Contact\n\n<script src=\"https://kit.fontawesome.com/9fb269b0d2.js\" crossorigin=\"anonymous\"></script>\n\n<ul class=\"fa-ul\" style=\"color:black; list-style:none;\">\n\n<li><i class=\"fa-brands fa-li fa-mastodon\"></i> <a href=\"https://scicomm.xyz/@nicebread\" target=\"_blank\" style=\"color:black; border-bottom:none;\">@nicebread@scicomm.xyz</a></li>\n\n<li><i class=\"fa-li fa fa-envelope-o\"></i> <a style=\"unicode-bidi:bidi-override; direction: rtl; color:black\" href=\"javascript:window.location.href = 'mailto:' + ['felix.schoenbrodt','psy.lmu.de'].join('@')\">ed.uml.ysp@tdorbneohcs.xilef</a></li>\n\n<li><i class=\"fa-li fa-solid fa-globe\"></i> <a href=\"https://www.nicebread.de\" target=\"_blank\" style=\"color:black; border-bottom:none;\">https://www.nicebread.de</a></li>\n\n\n<li><i class=\"fa-li fa fa-github\" aria-hidden=\"true\"></i> <a href=\"https://github.com/nicebread\" target=\"_blank\" style=\"color:black; border-bottom:none;\">https://github.com/nicebread</a></li>\n</ul>\n\n<small style=\"text-align:left;\">\n\n\n[![CC-BY-SA 4.0][cc-by-sa-image]][cc-by-sa]\n\n[cc-by-sa]: http://creativecommons.org/licenses/by-sa/4.0/\n[cc-by-sa-image]: https://licensebuttons.net/l/by-sa/4.0/88x31.png\n[cc-by-sa-shield]: https://img.shields.io/badge/License-CC%20BY%20SA4.0-lightgrey.svg\n\n</small>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}